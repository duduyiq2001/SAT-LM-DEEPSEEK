{"id": "sigz3", "style_template": "sigtpl", "prompt": "### Z3 CODE GENERATION TASK - GENERATE ONLY EXECUTABLE Z3 CODE\n\n# !!!! IMPORTANT INSTRUCTIONS !!!!\n# 1. ONLY OUTPUT PURE Z3 SOLVER CODE - NO TEXT EXPLANATIONS\n# 2. DO NOT INCLUDE ANY DIRECT ANSWERS OR SOLUTION STATEMENTS\n# 3. YOUR CODE WILL BE EXECUTED SEPARATELY TO FIND THE ANSWER\n# 4. USE THE EXACT Z3 FORMAT SHOWN IN THE EXAMPLES\n\n# Example Z3 setup (reference format only):\n\nfrom z3 import *\n\ndef check_valid():\n    # Setup variables\n    solver = Solver()\n    \n    # Add constraints\n    # ...\n    \n    # Test which option is valid (return option letter only)\n    results = []\n    # For each option, check if it must be true\n    # ...\n    \n    # Return comma-separated list of valid options\n    return \", \".join(results)\n\n# FORBIDDEN OUTPUT FORMATS:\n# ❌ \"The answer is A.\" \n# ❌ \"Option C must be true.\"\n# ❌ Any explanation or analysis\n\n# CORRECT OUTPUT FORMAT (ONLY CODE):\n# ✓ from z3 import *\n# ✓ def check_valid():\n# ✓     solver = Solver()\n# ✓     ...\n\n\n# EXAMPLE 1 (REFERENCE ONLY - DO NOT SOLVE)\n\"\"\"\nNine different treatments are available for a certain illness: three antibiotics\u2014F, G, and H\u2014three dietary regimens\u2014M, N, and O\u2014and three physical therapies\u2014U, V, and W. For each case of the illness, a doctor will prescribe exactly five of the treatments, in accordance with the following conditions: If two of the antibiotics are prescribed, the remaining antibiotic cannot be prescribed. There must be exactly one dietary regimen prescribed. If O is not prescribed, F cannot be prescribed. If W is prescribed, F cannot be prescribed. G cannot be prescribed if both N and U are prescribed. V cannot be prescribed unless both H and M are prescribed.\nQuestion: If O is prescribed for a given case, which one of the following is a pair of treatments both of which must also be prescribed for that case?\nChoices:\n(A) F, M\n(B) G, V\n(C) N, U\n(D) U, V\n(E) U, W\n\"\"\"\n# Example Z3 code pattern - no explanations, only executable code\nfrom z3 import *\n\n# Create variables as booleans for treatments\nF, G, H, M, N, O, U, V, W = Bools('F G H M N O U V W')\ntreatments = [F, G, H, M, N, O, U, V, W]\nantibiotics = [F, G, H]\ndietary_regimens = [M, N, O]\nphysical_therapies = [U, V, W]\n\ndef check_valid():\n    solver = Solver()\n    \n    # Exactly five treatments\n    solver.add(Sum([If(t, 1, 0) for t in treatments]) == 5)\n    \n    # If two antibiotics are prescribed, the third cannot be\n    solver.add(Implies(Sum([If(a, 1, 0) for a in antibiotics]) == 2,\n                      Not(And(F, G, H))))\n    \n    # Exactly one dietary regimen\n    solver.add(Sum([If(d, 1, 0) for d in dietary_regimens]) == 1)\n    \n    # If O is not prescribed, F cannot be prescribed\n    solver.add(Implies(Not(O), Not(F)))\n    \n    # If W is prescribed, F cannot be prescribed\n    solver.add(Implies(W, Not(F)))\n    \n    # G cannot be prescribed if both N and U are prescribed\n    solver.add(Implies(And(N, U), Not(G)))\n    \n    # V cannot be prescribed unless both H and M are prescribed\n    solver.add(Implies(V, And(H, M)))\n    \n    # O is prescribed (given)\n    solver.add(O)\n    \n    # Check each option\n    options = [\n        ('A', And(F, M)),\n        ('B', And(G, V)),\n        ('C', And(N, U)),\n        ('D', And(U, V)),\n        ('E', And(U, W))\n    ]\n    \n    results = []\n    for option, condition in options:\n        # Check if this condition must be true in all valid models\n        # Create a new solver to check if negation is unsatisfiable\n        check_solver = Solver()\n        check_solver.add(solver.assertions())\n        check_solver.add(Not(condition))\n        if check_solver.check() == unsat:\n            results.append(option)\n    \n    return \", \".join(results)\n\n\n# EXAMPLE 2 (REFERENCE ONLY - DO NOT SOLVE)\n\"\"\"\nEach of five students\u2014Hubert, Lori, Paul, Regina, and Sharon\u2014will visit exactly one of three cities\u2014Montreal, Toronto, or Vancouver\u2014for the month of March, according to the following conditions: Sharon visits a different city than Paul. Hubert visits the same city as Regina. Lori visits Montreal or else Toronto. If Paul visits Vancouver, Hubert visits Vancouver with him. Each student visits one of the cities with at least one of the other four students.\nQuestion: Which one of the following must be true for March?\nChoices:\n(A) If any of the students visits Montreal, Lori visits Montreal.\n(B) If any of the students visits Montreal, exactly two of them do.\n(C) If any of the students visits Toronto, exactly three of them do.\n(D) If any of the students visits Vancouver, Paul visits Vancouver.\n(E) If any of the students visits Vancouver, exactly three of them do.\n\"\"\"\n# Example Z3 code pattern - no explanations, only executable code\nfrom z3 import *\n\n# Create constants for cities (0=Montreal, 1=Toronto, 2=Vancouver)\nMontreal, Toronto, Vancouver = 0, 1, 2\n\n# Create variables for student city assignments\nHubert = Int('Hubert')\nLori = Int('Lori')\nPaul = Int('Paul')\nRegina = Int('Regina')\nSharon = Int('Sharon')\nstudents = [Hubert, Lori, Paul, Regina, Sharon]\n\ndef check_valid():\n    solver = Solver()\n    \n    # Each student visits exactly one city (0=Montreal, 1=Toronto, 2=Vancouver)\n    for student in students:\n        solver.add(Or(student == 0, student == 1, student == 2))\n    \n    # Sharon visits different city than Paul\n    solver.add(Sharon != Paul)\n    \n    # Hubert visits same city as Regina\n    solver.add(Hubert == Regina)\n    \n    # Lori visits Montreal or Toronto\n    solver.add(Or(Lori == 0, Lori == 1))\n    \n    # If Paul visits Vancouver, Hubert visits Vancouver\n    solver.add(Implies(Paul == 2, Hubert == 2))\n    \n    # Each student visits with at least one other\n    for student in students:\n        others_same_city = [If(other == student, 1, 0) for other in students if other != student]\n        solver.add(Sum(others_same_city) >= 1)\n    \n    # Define the conditions to check\n    options = [\n        # A: If any student visits Montreal, Lori visits Montreal\n        ('A', Implies(Or([s == 0 for s in students]), Lori == 0)),\n        # B: If any student visits Montreal, exactly two do\n        ('B', Implies(Or([s == 0 for s in students]), Sum([If(s == 0, 1, 0) for s in students]) == 2)),\n        # C: If any student visits Toronto, exactly three do\n        ('C', Implies(Or([s == 1 for s in students]), Sum([If(s == 1, 1, 0) for s in students]) == 3)),\n        # D: If any student visits Vancouver, Paul visits Vancouver\n        ('D', Implies(Or([s == 2 for s in students]), Paul == 2)),\n        # E: If any student visits Vancouver, exactly three do\n        ('E', Implies(Or([s == 2 for s in students]), Sum([If(s == 2, 1, 0) for s in students]) == 3))\n    ]\n    \n    results = []\n    for option, condition in options:\n        # Check if this condition must be true in all valid models\n        check_solver = Solver()\n        check_solver.add(solver.assertions())\n        check_solver.add(Not(condition))\n        if check_solver.check() == unsat:\n            results.append(option)\n    \n    return \", \".join(results)\n\n\n# REMEMBER: GENERATE ONLY Z3 CODE - NO DIRECT ANSWERS OR EXPLANATIONS\n# YOUR CODE WILL BE EXECUTED SEPARATELY TO DETERMINE THE ACTUAL ANSWER"}
